{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyz79\\\\metaplex\\\\candy-machine-mint\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useMemo } from \"react\";\nimport Home from \"./Home\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getPhantomWallet, getSolflareWallet, getSolletWallet } from \"@solana/wallet-adapter-wallets\";\nimport { ConnectionProvider, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst treasury = new anchor.web3.PublicKey(process.env.REACT_APP_TREASURY_ADDRESS);\nconst config = new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst candyMachineId = new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID);\nconst network = process.env.REACT_APP_SOLANA_NETWORK;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\nconst connection = new anchor.web3.Connection(rpcHost);\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE, 10);\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  _s();\n\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()], []);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      autoConnect: true,\n      children: /*#__PURE__*/_jsxDEV(WalletDialogProvider, {\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          candyMachineId: candyMachineId,\n          config: config,\n          connection: connection,\n          startDate: startDateSeed,\n          treasury: treasury,\n          txTimeout: txTimeout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kyz79/metaplex/candy-machine-mint/src/App.tsx"],"names":["useMemo","Home","anchor","clusterApiUrl","getPhantomWallet","getSolflareWallet","getSolletWallet","ConnectionProvider","WalletProvider","WalletDialogProvider","treasury","web3","PublicKey","process","env","REACT_APP_TREASURY_ADDRESS","config","REACT_APP_CANDY_MACHINE_CONFIG","candyMachineId","REACT_APP_CANDY_MACHINE_ID","network","REACT_APP_SOLANA_NETWORK","rpcHost","REACT_APP_SOLANA_RPC_HOST","connection","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","txTimeout","App","endpoint","wallets"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,eAHF,QAIO,gCAJP;AAMA,SACEC,kBADF,EAEEC,cAFF,QAGO,8BAHP;AAKA,SAASC,oBAAT,QAAqC,oCAArC;;AAEA,MAAMC,QAAQ,GAAG,IAAIR,MAAM,CAACS,IAAP,CAAYC,SAAhB,CACfC,OAAO,CAACC,GAAR,CAAYC,0BADG,CAAjB;AAIA,MAAMC,MAAM,GAAG,IAAId,MAAM,CAACS,IAAP,CAAYC,SAAhB,CACbC,OAAO,CAACC,GAAR,CAAYG,8BADC,CAAf;AAIA,MAAMC,cAAc,GAAG,IAAIhB,MAAM,CAACS,IAAP,CAAYC,SAAhB,CACrBC,OAAO,CAACC,GAAR,CAAYK,0BADS,CAAvB;AAIA,MAAMC,OAAO,GAAGP,OAAO,CAACC,GAAR,CAAYO,wBAA5B;AAEA,MAAMC,OAAO,GAAGT,OAAO,CAACC,GAAR,CAAYS,yBAA5B;AACA,MAAMC,UAAU,GAAG,IAAItB,MAAM,CAACS,IAAP,CAAYc,UAAhB,CAA2BH,OAA3B,CAAnB;AAEA,MAAMI,aAAa,GAAGC,QAAQ,CAACd,OAAO,CAACC,GAAR,CAAYc,0BAAb,EAA0C,EAA1C,CAA9B;AAEA,MAAMC,SAAS,GAAG,KAAlB,C,CAAyB;;AAEzB,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,QAAQ,GAAG/B,OAAO,CAAC,MAAMG,aAAa,CAACiB,OAAD,CAApB,EAA+B,EAA/B,CAAxB;AAEA,QAAMY,OAAO,GAAGhC,OAAO,CACrB,MAAM,CAACI,gBAAgB,EAAjB,EAAqBC,iBAAiB,EAAtC,EAA0CC,eAAe,EAAzD,CADe,EAErB,EAFqB,CAAvB;AAKA,sBACE,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEyB,QAA9B;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEC,OAAzB;AAAkC,MAAA,WAAW,MAA7C;AAAA,6BACE,QAAC,oBAAD;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,cAAc,EAAEd,cADlB;AAEE,UAAA,MAAM,EAAEF,MAFV;AAGE,UAAA,UAAU,EAAEQ,UAHd;AAIE,UAAA,SAAS,EAAEE,aAJb;AAKE,UAAA,QAAQ,EAAEhB,QALZ;AAME,UAAA,SAAS,EAAEmB;AANb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAxBD;;GAAMC,G;;KAAAA,G;AA0BN,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Home from \"./Home\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ConnectionProvider endpoint={endpoint}>\r\n      <WalletProvider wallets={wallets} autoConnect>\r\n        <WalletDialogProvider>\r\n          <Home\r\n            candyMachineId={candyMachineId}\r\n            config={config}\r\n            connection={connection}\r\n            startDate={startDateSeed}\r\n            treasury={treasury}\r\n            txTimeout={txTimeout}\r\n          />\r\n        </WalletDialogProvider>\r\n      </WalletProvider>\r\n    </ConnectionProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
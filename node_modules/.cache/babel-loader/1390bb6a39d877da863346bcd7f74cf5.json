{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyz79\\\\metaplex\\\\candy-machine-mint\\\\src\\\\Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken, shortenAddress } from \"./candy-machine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)``;\n_c = ConnectButton;\nconst CounterText = styled.span``; // add your styles here\n\n_c2 = CounterText;\nconst MintContainer = styled.div``; // add your styles here\n\n_c3 = MintContainer;\nconst MintButton = styled(Button)``; // add your styles here\n\n_c4 = MintButton;\n\nconst Home = props => {\n  _s();\n\n  var _wallet$publicKey;\n\n  const [balance, setBalance] = useState();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n  const wallet = useWallet();\n  const [candyMachine, setCandyMachine] = useState();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n\n      if (wallet.connected && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program) && wallet.publicKey) {\n        const mintTxId = await mintOneToken(candyMachine, props.config, wallet.publicKey, props.treasury);\n        const status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, \"singleGossip\", false);\n\n        if (!(status === null || status === void 0 ? void 0 : status.err)) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      }\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {} else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      if (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) {\n        const balance = await props.connection.getBalance(wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n  useEffect(() => {\n    (async () => {\n      if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n        return;\n      }\n\n      const anchorWallet = {\n        publicKey: wallet.publicKey,\n        signAllTransactions: wallet.signAllTransactions,\n        signTransaction: wallet.signTransaction\n      };\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsRemaining\n      } = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [wallet.connected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Address: \", shortenAddress(((_wallet$publicKey = wallet.publicKey) === null || _wallet$publicKey === void 0 ? void 0 : _wallet$publicKey.toBase58()) || \"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), wallet.connected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Balance: \", (balance || 0).toLocaleString(), \" SOL\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n      children: !wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n        disabled: isSoldOut || isMinting || !isActive,\n        onClick: onMint,\n        variant: \"contained\",\n        children: isSoldOut ? \"SOLD OUT\" : isActive ? isMinting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this) : \"MINT\" : /*#__PURE__*/_jsxDEV(Countdown, {\n          date: startDate,\n          onMount: ({\n            completed\n          }) => completed && setIsActive(true),\n          onComplete: () => setIsActive(true),\n          renderer: renderCounter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"J35BgecQ4BBBG4ysgAePEMK4zxk=\", false, function () {\n  return [useWallet];\n});\n\n_c5 = Home;\n\nconst renderCounter = ({\n  days,\n  hours,\n  minutes,\n  seconds,\n  completed\n}) => {\n  return /*#__PURE__*/_jsxDEV(CounterText, {\n    children: [hours, \" hours, \", minutes, \" minutes, \", seconds, \" seconds\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"CounterText\");\n$RefreshReg$(_c3, \"MintContainer\");\n$RefreshReg$(_c4, \"MintButton\");\n$RefreshReg$(_c5, \"Home\");","map":{"version":3,"sources":["C:/Users/kyz79/metaplex/candy-machine-mint/src/Home.tsx"],"names":["useEffect","useState","styled","Countdown","Button","CircularProgress","Snackbar","Alert","LAMPORTS_PER_SOL","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","getCandyMachineState","mintOneToken","shortenAddress","ConnectButton","CounterText","span","MintContainer","div","MintButton","Home","props","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","alertState","setAlertState","open","message","severity","undefined","startDate","setStartDate","Date","wallet","candyMachine","setCandyMachine","onMint","connected","program","publicKey","mintTxId","config","treasury","status","txTimeout","connection","err","error","msg","indexOf","code","getBalance","signAllTransactions","signTransaction","anchorWallet","goLiveDate","itemsRemaining","candyMachineId","toBase58","toLocaleString","completed","renderCounter","days","hours","minutes","seconds"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,MAAT,EAAiBC,gBAAjB,EAAmCC,QAAnC,QAAmD,mBAAnD;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAIA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AAEA,SAEEC,qCAFF,EAGEC,oBAHF,EAIEC,YAJF,EAKEC,cALF,QAMO,iBANP;;AAQA,MAAMC,aAAa,GAAGb,MAAM,CAACQ,kBAAD,CAAqB,EAAjD;KAAMK,a;AAEN,MAAMC,WAAW,GAAGd,MAAM,CAACe,IAAK,EAAhC,C,CAAmC;;MAA7BD,W;AAEN,MAAME,aAAa,GAAGhB,MAAM,CAACiB,GAAI,EAAjC,C,CAAoC;;MAA9BD,a;AAEN,MAAME,UAAU,GAAGlB,MAAM,CAACE,MAAD,CAAS,EAAlC,C,CAAqC;;MAA/BgB,U;;AAWN,MAAMC,IAAI,GAAIC,KAAD,IAAsB;AAAA;;AAAA;;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,EAAtC;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,KAAD,CAAxC,CAFiC,CAEgB;;AACjD,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,KAAD,CAA1C,CAHiC,CAGkB;;AACnD,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAAC,KAAD,CAA1C,CAJiC,CAIkB;;AAEnD,QAAM,CAAC8B,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAAa;AACvDgC,IAAAA,IAAI,EAAE,KADiD;AAEvDC,IAAAA,OAAO,EAAE,EAF8C;AAGvDC,IAAAA,QAAQ,EAAEC;AAH6C,GAAb,CAA5C;AAMA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,IAAIsC,IAAJ,CAASjB,KAAK,CAACe,SAAf,CAAD,CAA1C;AAEA,QAAMG,MAAM,GAAG/B,SAAS,EAAxB;AACA,QAAM,CAACgC,YAAD,EAAeC,eAAf,IAAkCzC,QAAQ,EAAhD;;AAEA,QAAM0C,MAAM,GAAG,YAAY;AACzB,QAAI;AACFb,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAIU,MAAM,CAACI,SAAP,KAAoBH,YAApB,aAAoBA,YAApB,uBAAoBA,YAAY,CAAEI,OAAlC,KAA6CL,MAAM,CAACM,SAAxD,EAAmE;AACjE,cAAMC,QAAQ,GAAG,MAAMlC,YAAY,CACjC4B,YADiC,EAEjCnB,KAAK,CAAC0B,MAF2B,EAGjCR,MAAM,CAACM,SAH0B,EAIjCxB,KAAK,CAAC2B,QAJ2B,CAAnC;AAOA,cAAMC,MAAM,GAAG,MAAMvC,qCAAqC,CACxDoC,QADwD,EAExDzB,KAAK,CAAC6B,SAFkD,EAGxD7B,KAAK,CAAC8B,UAHkD,EAIxD,cAJwD,EAKxD,KALwD,CAA1D;;AAQA,YAAI,EAACF,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEG,GAAT,CAAJ,EAAkB;AAChBrB,UAAAA,aAAa,CAAC;AACZC,YAAAA,IAAI,EAAE,IADM;AAEZC,YAAAA,OAAO,EAAE,kCAFG;AAGZC,YAAAA,QAAQ,EAAE;AAHE,WAAD,CAAb;AAKD,SAND,MAMO;AACLH,UAAAA,aAAa,CAAC;AACZC,YAAAA,IAAI,EAAE,IADM;AAEZC,YAAAA,OAAO,EAAE,gCAFG;AAGZC,YAAAA,QAAQ,EAAE;AAHE,WAAD,CAAb;AAKD;AACF;AACF,KAhCD,CAgCE,OAAOmB,KAAP,EAAmB;AACnB;AACA,UAAIpB,OAAO,GAAGoB,KAAK,CAACC,GAAN,IAAa,mCAA3B;;AACA,UAAI,CAACD,KAAK,CAACC,GAAX,EAAgB;AACd,YAAID,KAAK,CAACpB,OAAN,CAAcsB,OAAd,CAAsB,OAAtB,CAAJ,EAAoC,CACnC,CADD,MACO,IAAIF,KAAK,CAACpB,OAAN,CAAcsB,OAAd,CAAsB,OAAtB,CAAJ,EAAoC;AACzCtB,UAAAA,OAAO,GAAI,WAAX;AACD,SAFM,MAEA,IAAIoB,KAAK,CAACpB,OAAN,CAAcsB,OAAd,CAAsB,OAAtB,CAAJ,EAAoC;AACzCtB,UAAAA,OAAO,GAAI,sDAAX;AACD;AACF,OAPD,MAOO;AACL,YAAIoB,KAAK,CAACG,IAAN,KAAe,GAAnB,EAAwB;AACtBvB,UAAAA,OAAO,GAAI,WAAX;AACAN,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,SAHD,MAGO,IAAI0B,KAAK,CAACG,IAAN,KAAe,GAAnB,EAAwB;AAC7BvB,UAAAA,OAAO,GAAI,oCAAX;AACD;AACF;;AAEDF,MAAAA,aAAa,CAAC;AACZC,QAAAA,IAAI,EAAE,IADM;AAEZC,QAAAA,OAFY;AAGZC,QAAAA,QAAQ,EAAE;AAHE,OAAD,CAAb;AAKD,KAxDD,SAwDU;AACR,UAAIK,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEM,SAAZ,EAAuB;AACrB,cAAMvB,OAAO,GAAG,MAAMD,KAAK,CAAC8B,UAAN,CAAiBM,UAAjB,CAA4BlB,MAA5B,aAA4BA,MAA5B,uBAA4BA,MAAM,CAAEM,SAApC,CAAtB;AACAtB,QAAAA,UAAU,CAACD,OAAO,GAAGf,gBAAX,CAAV;AACD;;AACDsB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAhED;;AAkEA9B,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAIwC,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEM,SAAZ,EAAuB;AACrB,cAAMvB,OAAO,GAAG,MAAMD,KAAK,CAAC8B,UAAN,CAAiBM,UAAjB,CAA4BlB,MAAM,CAACM,SAAnC,CAAtB;AACAtB,QAAAA,UAAU,CAACD,OAAO,GAAGf,gBAAX,CAAV;AACD;AACF,KALD;AAMD,GAPQ,EAON,CAACgC,MAAD,EAASlB,KAAK,CAAC8B,UAAf,CAPM,CAAT;AASApD,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UACE,CAACwC,MAAD,IACA,CAACA,MAAM,CAACM,SADR,IAEA,CAACN,MAAM,CAACmB,mBAFR,IAGA,CAACnB,MAAM,CAACoB,eAJV,EAKE;AACA;AACD;;AAED,YAAMC,YAAY,GAAG;AACnBf,QAAAA,SAAS,EAAEN,MAAM,CAACM,SADC;AAEnBa,QAAAA,mBAAmB,EAAEnB,MAAM,CAACmB,mBAFT;AAGnBC,QAAAA,eAAe,EAAEpB,MAAM,CAACoB;AAHL,OAArB;AAMA,YAAM;AAAEnB,QAAAA,YAAF;AAAgBqB,QAAAA,UAAhB;AAA4BC,QAAAA;AAA5B,UACJ,MAAMnD,oBAAoB,CACxBiD,YADwB,EAExBvC,KAAK,CAAC0C,cAFkB,EAGxB1C,KAAK,CAAC8B,UAHkB,CAD5B;AAOAxB,MAAAA,YAAY,CAACmC,cAAc,KAAK,CAApB,CAAZ;AACAzB,MAAAA,YAAY,CAACwB,UAAD,CAAZ;AACApB,MAAAA,eAAe,CAACD,YAAD,CAAf;AACD,KA1BD;AA2BD,GA5BQ,EA4BN,CAACD,MAAD,EAASlB,KAAK,CAAC0C,cAAf,EAA+B1C,KAAK,CAAC8B,UAArC,CA5BM,CAAT;AA8BA,sBACE;AAAA,eACGZ,MAAM,CAACI,SAAP,iBACC;AAAA,8BAAa9B,cAAc,CAAC,sBAAA0B,MAAM,CAACM,SAAP,wEAAkBmB,QAAlB,OAAgC,EAAjC,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAKGzB,MAAM,CAACI,SAAP,iBACC;AAAA,8BAAa,CAACrB,OAAO,IAAI,CAAZ,EAAe2C,cAAf,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eASE,QAAC,aAAD;AAAA,gBACG,CAAC1B,MAAM,CAACI,SAAR,gBACC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,UAAD;AACE,QAAA,QAAQ,EAAEjB,SAAS,IAAIE,SAAb,IAA0B,CAACJ,QADvC;AAEE,QAAA,OAAO,EAAEkB,MAFX;AAGE,QAAA,OAAO,EAAC,WAHV;AAAA,kBAKGhB,SAAS,GACR,UADQ,GAENF,QAAQ,GACVI,SAAS,gBACP,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBADO,GAGP,MAJQ,gBAOV,QAAC,SAAD;AACE,UAAA,IAAI,EAAEQ,SADR;AAEE,UAAA,OAAO,EAAE,CAAC;AAAE8B,YAAAA;AAAF,WAAD,KAAmBA,SAAS,IAAIzC,WAAW,CAAC,IAAD,CAFtD;AAGE,UAAA,UAAU,EAAE,MAAMA,WAAW,CAAC,IAAD,CAH/B;AAIE,UAAA,QAAQ,EAAE0C;AAJZ;AAAA;AAAA;AAAA;AAAA;AAdJ;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YATF,eAsCE,QAAC,QAAD;AACE,MAAA,IAAI,EAAErC,UAAU,CAACE,IADnB;AAEE,MAAA,gBAAgB,EAAE,IAFpB;AAGE,MAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,EAAE,GAAGD,UAAL;AAAiBE,QAAAA,IAAI,EAAE;AAAvB,OAAD,CAH9B;AAAA,6BAKE,QAAC,KAAD;AACE,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,EAAE,GAAGD,UAAL;AAAiBE,UAAAA,IAAI,EAAE;AAAvB,SAAD,CAD9B;AAEE,QAAA,QAAQ,EAAEF,UAAU,CAACI,QAFvB;AAAA,kBAIGJ,UAAU,CAACG;AAJd;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YAtCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqDD,CA/KD;;GAAMb,I;UAcWZ,S;;;MAdXY,I;;AAuLN,MAAM+C,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA,OAAxB;AAAiCL,EAAAA;AAAjC,CAAD,KAAuD;AAC3E,sBACE,QAAC,WAAD;AAAA,eACGG,KADH,cACkBC,OADlB,gBACqCC,OADrC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;AAQA,eAAenD,IAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"./candy-machine\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\n\r\nconst CounterText = styled.span``; // add your styles here\r\n\r\nconst MintContainer = styled.div``; // add your styles here\r\n\r\nconst MintButton = styled(Button)``; // add your styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n\r\n  const wallet = useWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet?.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (\r\n        !wallet ||\r\n        !wallet.publicKey ||\r\n        !wallet.signAllTransactions ||\r\n        !wallet.signTransaction\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const anchorWallet = {\r\n        publicKey: wallet.publicKey,\r\n        signAllTransactions: wallet.signAllTransactions,\r\n        signTransaction: wallet.signTransaction,\r\n      } as anchor.Wallet;\r\n\r\n      const { candyMachine, goLiveDate, itemsRemaining } =\r\n        await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection\r\n        );\r\n\r\n      setIsSoldOut(itemsRemaining === 0);\r\n      setStartDate(goLiveDate);\r\n      setCandyMachine(candyMachine);\r\n    })();\r\n  }, [wallet, props.candyMachineId, props.connection]);\r\n\r\n  return (\r\n    <main>\r\n      {wallet.connected && (\r\n        <p>Address: {shortenAddress(wallet.publicKey?.toBase58() || \"\")}</p>\r\n      )}\r\n\r\n      {wallet.connected && (\r\n        <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\r\n      )}\r\n\r\n      <MintContainer>\r\n        {!wallet.connected ? (\r\n          <ConnectButton>Connect Wallet</ConnectButton>\r\n        ) : (\r\n          <MintButton\r\n            disabled={isSoldOut || isMinting || !isActive}\r\n            onClick={onMint}\r\n            variant=\"contained\"\r\n          >\r\n            {isSoldOut ? (\r\n              \"SOLD OUT\"\r\n            ) : isActive ? (\r\n              isMinting ? (\r\n                <CircularProgress />\r\n              ) : (\r\n                \"MINT\"\r\n              )\r\n            ) : (\r\n              <Countdown\r\n                date={startDate}\r\n                onMount={({ completed }) => completed && setIsActive(true)}\r\n                onComplete={() => setIsActive(true)}\r\n                renderer={renderCounter}\r\n              />\r\n            )}\r\n          </MintButton>\r\n        )}\r\n      </MintContainer>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}